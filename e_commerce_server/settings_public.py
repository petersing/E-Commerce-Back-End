"""
Django settings for e_commerce_server project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import stripe
import logging
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT = os.path.join(BASE_DIR)

MAX_IMAGE_SIZE = (1024 , 1024)

MAX_CHAT_FILE_SIZE=(1024, 1024)

MEDIA_URL = '/media/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xxxxx'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

AUTH_USER_MODEL = 'User_Manager_API.Client'

IMAGE_SERVER_URL = "http://localhost:8000/api/Media/Image/"


# Application definition

INSTALLED_APPS = [
    ####WebSocket
    'daphne',
    'graphene_django',
    ####Django Management
    #'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    ###App
    'User_Manager_API',
    'Product_API',
    'Order_API',
    'Chat_API'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'e_commerce_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'e_commerce_server.wsgi.application'
ASGI_APPLICATION = 'e_commerce_server.asgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', 
        'NAME': 'e-commerce-server',
        'USER': 'postgres',
        'PASSWORD': 'xxxxx',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Hong_Kong'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#### The following code are CORS function. In real situation please disable '*' and replace it as your frontend server url
ALLOWED_HOSTS=["*"]

#CORS_ALLOWED_ORIGINS = [
#    "http://localhost:8000",
#]

CORS_ORIGIN_ALLOW_ALL = True


CORS_ALLOW_CREDENTIALS = True

#####


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/8",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

CHANNEL_LAYERS = {
     "default": {
         "BACKEND": "channels_redis.pubsub.RedisPubSubChannelLayer",
         "CONFIG": {
             "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379/1')],
         },
     },
 }

REST_FRAMEWORK = {
    ##'DEFAULT_AUTHENTICATION_CLASSES': ['JWT_Authentication.Generate_JWT.JWT_Authentication']
}

STRIPE_PUBLIC_KEY = 'pk_test_xxxxx'
STRIPE_SECRET_KEY = 'sk_test_xxxxx'

stripe.api_key = STRIPE_SECRET_KEY

GRAPHENE = {
    'SCHEMA': 'GraphQL.schema.schema',
}

JWT_ENV_SETTING = {'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
                   'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
                   'EDIT_TOKEN_LIFETIME': timedelta(minutes=15),
                   'algorithm': "HS512",
                   'secret_key': 'VGVzdF9EamFuZ29fSldUX0tleQ==',
                   "issuer": "ECommerceTech"
                   }



GOOGLE_CLIENT_ID = 'xxxxx.apps.googleusercontent.com'

SUBSCRIPTION_PLAN = {'Basic': {'Price': 50, "Product": 50}, 
                     'Prime': {'Price': 100, "Product": 100}, 
                     'Advanced': {'Price': 200, "Product": 9999999}}

logging.getLogger("graphql.execution.utils").setLevel(logging.CRITICAL)

